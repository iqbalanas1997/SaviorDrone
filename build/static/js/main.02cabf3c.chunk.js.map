{"version":3,"sources":["Map.js","App.js","index.js"],"names":["mapStyles","position","width","height","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","prevProps","prevState","google","this","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","Object","assign","Map","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","App","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onClose","onClick","name","GoogleApiWrapper","apiKey","render","document","getElementById"],"mappings":"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","file":"static/js/main.02cabf3c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst mapStyles = {\r\n  map: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n};\r\n\r\nexport class CurrentLocation extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { lat, lng } = this.props.initialCenter;\r\n\r\n    this.state = {\r\n      currentLocation: {\r\n        lat: lat,\r\n        lng: lng,\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.google !== this.props.google) {\r\n      this.loadMap();\r\n    }\r\n    if (prevState.currentLocation !== this.state.currentLocation) {\r\n      this.recenterMap();\r\n    }\r\n  }\r\n\r\n  recenterMap() {\r\n    const map = this.map;\r\n    const current = this.state.currentLocation;\r\n    const google = this.props.google;\r\n    const maps = google.maps;\r\n\r\n    if (map) {\r\n      let center = new maps.LatLng(current.lat, current.lng);\r\n      map.panTo(center);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    if (this.props.centerAroundCurrentLocation) {\r\n      if (navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition((pos) => {\r\n          const coords = pos.coords;\r\n          this.setState({\r\n            currentLocation: {\r\n              lat: coords.latitude,\r\n              lng: coords.longitude,\r\n            },\r\n          });\r\n        });\r\n      }\r\n    }\r\n    this.loadMap();\r\n  }\r\n\r\n  loadMap() {\r\n    if (this.props && this.props.google) {\r\n      // checks if google is available\r\n      const { google } = this.props;\r\n      const maps = google.maps;\r\n\r\n      const mapRef = this.refs.map;\r\n\r\n      // reference to the actual DOM element\r\n      const node = ReactDOM.findDOMNode(mapRef);\r\n\r\n      let { zoom } = this.props;\r\n      const { lat, lng } = this.state.currentLocation;\r\n      const center = new maps.LatLng(lat, lng);\r\n\r\n      const mapConfig = Object.assign(\r\n        {},\r\n        {\r\n          center: center,\r\n          zoom: zoom,\r\n        }\r\n      );\r\n\r\n      // maps.Map() is constructor that instantiates the map\r\n      this.map = new maps.Map(node, mapConfig);\r\n    }\r\n  }\r\n\r\n  renderChildren() {\r\n    const { children } = this.props;\r\n\r\n    if (!children) return;\r\n\r\n    return React.Children.map(children, (c) => {\r\n      if (!c) return;\r\n\r\n      return React.cloneElement(c, {\r\n        map: this.map,\r\n        google: this.props.google,\r\n        mapCenter: this.state.currentLocation,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const style = Object.assign({}, mapStyles.map);\r\n\r\n    return (\r\n      <div>\r\n        <div style={style} ref=\"map\">\r\n          Loading map...\r\n        </div>\r\n        {this.renderChildren()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCurrentLocation.defaultProps = {\r\n  zoom: 14,\r\n  initialCenter: {\r\n    lat: -1.2884,\r\n    lng: 36.8233,\r\n  },\r\n  centerAroundCurrentLocation: false,\r\n  visible: true,\r\n};\r\n\r\nexport default CurrentLocation;\r\n","import { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\nimport { Component } from \"react\";\n\nimport CurrentLocation from \"./Map\";\n//<Switch />;\n\nexport class App extends Component {\n  state = {\n    showingInfoWindow: false, // Hides or shows the InfoWindow\n    activeMarker: {}, // Shows the active marker upon click\n    selectedPlace: {}, // Shows the InfoWindow to the selected place upon a marker\n  };\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n    });\n\n  onClose = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\n        <Marker onClick={this.onMarkerClick} name={\"Current Location\"} />\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n        </InfoWindow>\n      </CurrentLocation>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBFAs2DVLRKt_tbJinn7Ox213xfMCTYqX4\",\n})(App);\n","//var ReactDOM = require('react-dom');\nimport ReactDOM from \"react-dom\";\n\n//import Switch from \"./Components/Switch\";\nimport Switch from \"react-switch\";\nimport \"./index.css\";\nimport React from \"react\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}